---
import type { CollectionEntry } from 'astro:content';
import ExpandedPostItem from './ExpandedPostItem.astro';

type BlogPost = CollectionEntry<'blog'>;
const { posts } = Astro.props;

function groupPostsByYear(posts: BlogPost[]) {
	const grouped = posts.reduce(
		(acc, post) => {
			const year = post.data.pubDate.getFullYear();
			if (!acc[year]) {
				acc[year] = [];
			}
			acc[year].push(post);
			return acc;
		},
		{} as Record<number, BlogPost[]>,
	);

	return Object.entries(grouped)
		.sort(([a], [b]) => Number(b) - Number(a))
		.map(([year, posts]) => ({
			year: Number(year),
			posts: posts.sort((a, b) => {
				// First, sort by publication date (most recent first)
				const pubDateDiff = b.data.pubDate.getTime() - a.data.pubDate.getTime();
				if (pubDateDiff !== 0) {
					return pubDateDiff;
				}
				
				// If same publication date, sort by updated date (most recent first)
				const aUpdated = a.data.updatedDate || a.data.pubDate;
				const bUpdated = b.data.updatedDate || b.data.pubDate;
				return bUpdated.getTime() - aUpdated.getTime();
			}),
		}));
}

const groupedPosts = groupPostsByYear(posts);
---

{
	groupedPosts.map(({ year, posts }) => (
		<div class='mb-8'>
			<h2 class='text-2xl font-bold mb-4'>{year}</h2>
			<div class='space-y-1'>
				{posts.map((post: BlogPost) => (
					<ExpandedPostItem post={post} />
				))}
			</div>
		</div>
	))
}
