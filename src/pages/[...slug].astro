---
import { Image } from 'astro:assets';
import { type CollectionEntry, getCollection } from 'astro:content';
import { getTagBackgroundColor } from '@src/utils/tagColors';
import FormattedDate from '../components/FormattedDate.astro';
import Prose from '../components/Prose.astro';
import TableOfContent from '../components/widgets/TableOfContent.astro';
import BaseLayout from '../layouts/BaseLayout.astro';
import Comments from '../components/Comments.astro';
import { slugify } from '../utils';

export const prerender = true;

export async function getStaticPaths() {
	const posts = await getCollection('blog');
	return posts.map((post: CollectionEntry<'blog'>) => ({
		params: { slug: post.slug },
		props: { post },
	}));
}

type Props = {
	post: CollectionEntry<'blog'>;
};

const { slug } = Astro.params;
let { post } = Astro.props as Props;

if (Astro.props.post) {
	// Static mode: post is passed as a prop
	post = Astro.props.post;
} else {
	// Server mode: fetch the post
	const posts = await getCollection('blog');
	const foundPost = posts.find((p: CollectionEntry<'blog'>) => p.slug === slug);
	if (!foundPost) {
		return Astro.redirect('/404');
	}
	post = foundPost;
}

const {
	data: { title, seoTitle, description, coverImage, pubDate, tags },
} = post;
const { Content, headings } = await post.render();

const getTagClasses = (tag: string) => `
  rounded-2xl
  text-sm no-underline px-2 py-0.5
  transition-all duration-700
  hover:opacity-80
  ${getTagBackgroundColor(tag)}
  ${getTagBackgroundColor(tag).includes('dark:bg-') ? 'text-zinc-800 dark:text-zinc-200' : 'text-zinc-700 dark:text-zinc-300'}
`;
---

<BaseLayout title={seoTitle || title} description={description} image={coverImage?.src || undefined}>
	<div class='container'>
		<main class='overflow-hidden mx-auto max-w-4xl'>
			<article>
				<Prose>
					<div class='mb-6'>
						<a
							href='/'
							class='inline-flex items-center gap-2 text-zinc-700 dark:text-zinc-300 hover:text-zinc-950 dark:hover:text-zinc-100 transition-colors'
						>
							<svg
								xmlns='http://www.w3.org/2000/svg'
								width='16'
								height='16'
								viewBox='0 0 24 24'
								fill='none'
								stroke='currentColor'
								stroke-width='2'
								stroke-linecap='round'
								stroke-linejoin='round'
							>
								<path d='M19 12H5M12 19l-7-7 7-7'></path>
							</svg>
							Home
						</a>
					</div>
					<div>
						<h1 class='!my-1 leading-tight'>{title}</h1>
						<div
							class='text-sm font-[500] mt-2 sm:mt-0 py-1 md:text-right flex flex-col sm:flex-row gap-3 sm:justify-between sm:items-center'
						>
							{
								(
									<div class='flex gap-2'>
										{(tags || [])?.map((tag: string) => (
											<a class={getTagClasses(tag)} href={`/tags/${slugify(tag)}`}>
												{tag}
											</a>
										))}
									</div>
								)
							}
							<div>
								{
									pubDate ? (
										<>
											Published on{' '}
											<strong>
												<FormattedDate date={pubDate} />
											</strong>
										</>
									) : (
										<>
											Published on{' '}
											<strong>
												<FormattedDate date={pubDate} />
											</strong>
										</>
									)
								}
							</div>
						</div>
					</div>
					<div class='py-3 overflow-hidden'>
						<script>
							import('@zachleat/snow-fall');
							import('@11ty/is-land/is-land.js');
						</script>
						{
							coverImage && !tags?.includes('Asides') && (
								<is-land on:media='(prefers-reduced-motion: no-preference)'>
									<snow-fall count='20'>
										<Image class='w-full m-0 lg:mb-2' src={coverImage} alt={title} loading='eager' />
									</snow-fall>
								</is-land>
							)
						}
					</div>
					<Content />
				</Prose>
			</article>

			<div class='mt-8 space-y-8'>
				<div class='mx-auto max-w-2xl'>{headings.length > 0 && <TableOfContent headings={headings} />}</div>

				<div class='mx-auto max-w-2xl'>
					<Comments slug={slug} />
				</div>
			</div>
		</main>
	</div>
</BaseLayout>

<script async is:inline>
	const anchors = document.querySelectorAll('.prose h2[id], .prose h3[id]');
	const links = document.querySelectorAll('nav.toc ul li a');

	function observeToc() {
		if (typeof anchors != 'undefined' && anchors != null && typeof links != 'undefined' && links != null) {
			let scrollTop = window.scrollY;

			// highlight the last scrolled-to: set everything inactive first
			for (const link of links) {
				link.classList.add('border-transparent', 'text-inherit');
				link.classList.remove('bg-[var(--background-surface-color)]', 'border-[var(--soft-border-color)]', 'text-[var(--link-color)]');
			}
			// then iterate backwards, on the first match highlight it and break
			for (var i = anchors.length - 1; i >= 0; i--) {
				if (scrollTop > anchors[i].offsetTop - 80) {
					links[i].classList.remove('border-transparent', 'text-inherit');
					links[i].classList.add('bg-[var(--background-surface-color)]', 'border-[var(--soft-border-color)]', 'text-[var(--link-color)]');
					break;
				}
			}
		}
	}

	window.addEventListener('scroll', (event) => {
		observeToc(event);
	});
	window.addEventListener('hashchange', (event) => {
		observeToc(event);
	});
</script>
